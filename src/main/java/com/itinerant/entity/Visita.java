package com.itinerant.entity;
// Generated 16 ago 2022 11:43:03 by Hibernate Tools 4.3.6.Final

import java.beans.Transient;
import java.util.Base64;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Visita generated by hbm2java
 */
@Entity
@NamedQueries({
	 @NamedQuery(name = "Visita.findAll", query = "SELECT v FROM Visita v"),
	 @NamedQuery(name = "Visita.searchAll", query = "SELECT v FROM Visita v ORDER BY v.fecha DESC, v.horaInicio DESC"),
	 @NamedQuery(name = "Visita.findAllByLogin", query = "SELECT v FROM Visita v WHERE v.profesional.login = :login ORDER BY v.fecha, v.horaInicio"),
	 @NamedQuery(name = "Visita.countAll", query = "SELECT count(*) FROM Visita v"),
	 @NamedQuery(name = "Visita.search", query = "SELECT DISTINCT v FROM Visita v JOIN v.categorias c WHERE "
	 											+ "lower(v.nombre) LIKE '%' || :keyword || '%'"
	 											+ "OR lower(v.descripcion) LIKE '%' || :keyword || '%'"
	 											+ "OR lower(v.localidad.nombre) LIKE '%' || :keyword || '%'"
	 											+ "OR lower(v.profesional.nombre) LIKE '%' || :keyword || '%'"
	 											+ "OR lower(v.profesional.apellidos) LIKE '%' || :keyword || '%'"
	 											+ "OR lower(c.nombre) LIKE '%' || :keyword || '%'"
	 											+ "ORDER BY v.fecha DESC, v.horaInicio DESC"),
})
@Table(name = "visita", catalog = "itinerant_db")
public class Visita implements java.io.Serializable {

	private Integer idVisita;
	private Localidad localidad;
	private Profesional profesional;
	private Date fecha;
	private Date horaInicio;
	private Date horaFin;
	private String descripcion;
	private int duracionCitas;
	private double duracionDesplazamiento;
	private double precio;
	private String imagenRuta;
	private String nombre;
	private Set<Categoria> categorias = new HashSet<Categoria>(0);
	private Set<Cita> citas = new HashSet<Cita>(0);

	public Visita() {
	}

	public Visita(Localidad localidad, Profesional profesional, Date fecha, Date horaInicio, Date horaFin,
			String descripcion, int duracionCitas, double duracionDesplazamiento, double precio, String nombre) {
		this.localidad = localidad;
		this.profesional = profesional;
		this.fecha = fecha;
		this.horaInicio = horaInicio;
		this.horaFin = horaFin;
		this.descripcion = descripcion;
		this.duracionCitas = duracionCitas;
		this.duracionDesplazamiento = duracionDesplazamiento;
		this.precio = precio;
		this.nombre = nombre;
	}

	public Visita(Localidad localidad, Profesional profesional, Date fecha, Date horaInicio, Date horaFin,
			String descripcion, int duracionCitas, double duracionDesplazamiento, double precio, String imagenRuta,
			String nombre, Set<Categoria> categorias, Set<Cita> citas) {
		this.localidad = localidad;
		this.profesional = profesional;
		this.fecha = fecha;
		this.horaInicio = horaInicio;
		this.horaFin = horaFin;
		this.descripcion = descripcion;
		this.duracionCitas = duracionCitas;
		this.duracionDesplazamiento = duracionDesplazamiento;
		this.precio = precio;
		this.imagenRuta = imagenRuta;
		this.nombre = nombre;
		this.categorias = categorias;
		this.citas = citas;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id_visita", unique = true, nullable = false)
	public Integer getIdVisita() {
		return this.idVisita;
	}

	public void setIdVisita(Integer idVisita) {
		this.idVisita = idVisita;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_localidad", nullable = false)
	public Localidad getLocalidad() {
		return this.localidad;
	}

	public void setLocalidad(Localidad localidad) {
		this.localidad = localidad;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_profesional", nullable = false)
	public Profesional getProfesional() {
		return this.profesional;
	}

	public void setProfesional(Profesional profesional) {
		this.profesional = profesional;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "fecha", nullable = false, length = 10)
	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "hora_inicio", nullable = false, length = 19)
	public Date getHoraInicio() {
		return this.horaInicio;
	}

	public void setHoraInicio(Date horaInicio) {
		this.horaInicio = horaInicio;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "hora_fin", nullable = false, length = 19)
	public Date getHoraFin() {
		return this.horaFin;
	}

	public void setHoraFin(Date horaFin) {
		this.horaFin = horaFin;
	}

	@Column(name = "descripcion", nullable = false, length = 200)
	public String getDescripcion() {
		return this.descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	@Column(name = "duracion_citas", nullable = false)
	public int getDuracionCitas() {
		return this.duracionCitas;
	}

	public void setDuracionCitas(int duracionCitas) {
		this.duracionCitas = duracionCitas;
	}

	@Column(name = "duracion_desplazamiento", nullable = false, precision = 22, scale = 0)
	public double getDuracionDesplazamiento() {
		return this.duracionDesplazamiento;
	}

	public void setDuracionDesplazamiento(double duracionDesplazamiento) {
		this.duracionDesplazamiento = duracionDesplazamiento;
	}

	@Column(name = "precio", nullable = false, precision = 22, scale = 0)
	public double getPrecio() {
		return this.precio;
	}

	public void setPrecio(double precio) {
		this.precio = precio;
	}

	@Column(name = "imagen_ruta")
	public String getImagenRuta() {
		return this.imagenRuta;
	}

	public void setImagenRuta(String imagenRuta) {
		this.imagenRuta = imagenRuta;
	}

	@Column(name = "nombre", nullable = false, length = 50)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "visita_categoria", catalog = "itinerant_db", joinColumns = {
			@JoinColumn(name = "id_visita", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "id_categoria", nullable = false, updatable = false) })
	public Set<Categoria> getCategorias() {
		return this.categorias;
	}

	public void setCategorias(Set<Categoria> categorias) {
		this.categorias = categorias;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "visita")
	public Set<Cita> getCitas() {
		return this.citas;
	}

	public void setCitas(Set<Cita> citas) {
		this.citas = citas;
	}
}
