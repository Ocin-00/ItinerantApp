package com.itinerant.entity;
// Generated 5 jul 2022 14:47:27 by Hibernate Tools 4.3.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * UsuarioInterno generated by hbm2java
 */
@Entity
@NamedQueries({
	 @NamedQuery(name = "UsuarioInterno.findAll", query = "SELECT u FROM UsuarioInterno u ORDER BY u.apellidos"),
	 @NamedQuery(name = "UsuarioInterno.countAll", query = "SELECT count(*) FROM UsuarioInterno u"),
})
@Inheritance(
	    strategy = InheritanceType.JOINED
)
@Table(name = "usuario_interno", catalog = "itinerant_db", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class UsuarioInterno implements java.io.Serializable {

	protected String login;
	protected String password;
	protected String email;
	protected String nombre;
	protected String apellidos;
	protected Date fechaNac;
	protected byte[] fotoPerfil;
	protected Set<Chat> chatsForUsuarioFuente = new HashSet<Chat>(0);
	protected Set<Alerta> alertas = new HashSet<Alerta>(0);
	protected Set<Chat> chatsForUsuarioDestino = new HashSet<Chat>(0);

	public UsuarioInterno() {
	}

	public UsuarioInterno(String login, String password, String email, String nombre, String apellidos, Date fechaNac) {
		this.login = login;
		this.password = password;
		this.email = email;
		this.nombre = nombre;
		this.apellidos = apellidos;
		this.fechaNac = fechaNac;
	}

	public UsuarioInterno(String login, String password, String email, String nombre, String apellidos, Date fechaNac,
			byte[] fotoPerfil, Set<Chat> chatsForUsuarioFuente, Set<Alerta> alertas,
			Set<Chat> chatsForUsuarioDestino) {
		this.login = login;
		this.password = password;
		this.email = email;
		this.nombre = nombre;
		this.apellidos = apellidos;
		this.fechaNac = fechaNac;
		this.fotoPerfil = fotoPerfil;
		this.chatsForUsuarioFuente = chatsForUsuarioFuente;
		this.alertas = alertas;
		this.chatsForUsuarioDestino = chatsForUsuarioDestino;
	}

	@Id

	@Column(name = "login", unique = true, nullable = false, length = 30)
	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	@Column(name = "password", nullable = false, length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "email", unique = true, nullable = false, length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "nombre", nullable = false, length = 50)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "apellidos", nullable = false, length = 100)
	public String getApellidos() {
		return this.apellidos;
	}

	public void setApellidos(String apellidos) {
		this.apellidos = apellidos;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "fecha_nac", nullable = false, length = 10)
	public Date getFechaNac() {
		return this.fechaNac;
	}

	public void setFechaNac(Date fechaNac) {
		this.fechaNac = fechaNac;
	}

	@Column(name = "foto_perfil")
	public byte[] getFotoPerfil() {
		return this.fotoPerfil;
	}

	public void setFotoPerfil(byte[] fotoPerfil) {
		this.fotoPerfil = fotoPerfil;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioInternoByUsuarioFuente")
	public Set<Chat> getChatsForUsuarioFuente() {
		return this.chatsForUsuarioFuente;
	}

	public void setChatsForUsuarioFuente(Set<Chat> chatsForUsuarioFuente) {
		this.chatsForUsuarioFuente = chatsForUsuarioFuente;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioInterno")
	public Set<Alerta> getAlertas() {
		return this.alertas;
	}

	public void setAlertas(Set<Alerta> alertas) {
		this.alertas = alertas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioInternoByUsuarioDestino")
	public Set<Chat> getChatsForUsuarioDestino() {
		return this.chatsForUsuarioDestino;
	}
	
	public void setChatsForUsuarioDestino(Set<Chat> chatsForUsuariosDestino) {
		this.chatsForUsuarioDestino = chatsForUsuariosDestino;
	}

}
